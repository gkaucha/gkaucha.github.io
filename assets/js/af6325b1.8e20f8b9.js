"use strict";(self.webpackChunkgkaucha_github_io=self.webpackChunkgkaucha_github_io||[]).push([[8262],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>g});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},m=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=l(t),d=a,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return t?n.createElement(g,s(s({ref:r},m),{},{components:t})):n.createElement(g,s({ref:r},m))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5852:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_position:3},s="Processor and Assembly Language",i={unversionedId:"Programming/processor-and-assembly-language",id:"Programming/processor-and-assembly-language",title:"Processor and Assembly Language",description:"Program Overview",source:"@site/docs/Programming/processor-and-assembly-language.md",sourceDirName:"Programming",slug:"/Programming/processor-and-assembly-language",permalink:"/docs/Programming/processor-and-assembly-language",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programming/processor-and-assembly-language.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Fundamental Programming Concepts",permalink:"/docs/Programming/fundamental-programming-concepts"},next:{title:"Building on Basics",permalink:"/docs/Programming/building-on-basics"}},p={},l=[{value:"Program Overview",id:"program-overview",level:3},{value:"What does an executable binary look like?",id:"what-does-an-executable-binary-look-like",level:4},{value:"The x86 Processor",id:"the-x86-processor",level:3},{value:"Assembly Language",id:"assembly-language",level:3}],m={toc:l},c="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(c,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"processor-and-assembly-language"},"Processor and Assembly Language"),(0,a.kt)("h3",{id:"program-overview"},"Program Overview"),(0,a.kt)("p",null,"Let's write a simple source code in C."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'//program name firstcode.c\n#include<stdio.h>\n\nint main()\n{\n int i;\n for(i=0; i<5; i++)\n {\n   puts("Hello, World!\\n");\n }\n return 0;\n}\n')),(0,a.kt)("p",null,'The above C-source code needs to be compiled to an executable binary file that the CPU can understand.\nLet\'s compile the source code with gcc compiler to ouput the file as "first_binary_program".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ gcc firstprogram.c -o first_binary_program\n$ ls -al first_binary_program\n")),(0,a.kt)("p",null,'The "first_binary_program" binary instructions is written in machine language.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The compiler translates the language of C code into machine language for a variety of processor architecutres like ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"x86")),".",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("strong",{parentName:"li"},"Each architecture has a different machine language"))),(0,a.kt)("h4",{id:"what-does-an-executable-binary-look-like"},"What does an executable binary look like?"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("strong",{parentName:"p"},"objdump")," program provided on GNU development tools, to examine complied binaries.\nLet's look how the main() function was translated into the machine code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ objdump -D first_binary_program | grep -A20  main.:\n0000000000001149 <main>:\n    1149:   f3 0f 1e fa             endbr64 \n    114d:   55                      push   %rbp\n    114e:   48 89 e5                mov    %rsp,%rbp\n    1151:   48 83 ec 10             sub    $0x10,%rsp\n    1155:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n    115c:   eb 13                   jmp    1171 <main+0x28>\n    115e:   48 8d 05 9f 0e 00 00    lea    0xe9f(%rip),%rax        # 2004 <_IO_stdin_used+0x4>\n    1165:   48 89 c7                mov    %rax,%rdi\n    1168:   e8 e3 fe ff ff          call   1050 <puts@plt>\n    116d:   83 45 fc 01             addl   $0x1,-0x4(%rbp)\n    1171:   83 7d fc 09             cmpl   $0x9,-0x4(%rbp)\n    1175:   7e e7                   jle    115e <main+0x15>\n    1177:   b8 00 00 00 00          mov    $0x0,%eax\n    117c:   c9                      leave  \n    117d:   c3                      ret \n")),(0,a.kt)("admonition",{title:"Output of OBJDUMP",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"A20 : filters the output to only display 20 lines after regular expression main.:")),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"First column")," : ",(0,a.kt)("strong",{parentName:"p"},"1149"),", ",(0,a.kt)("strong",{parentName:"p"},"114d"),".. the hexadecimal numbers are ",(0,a.kt)("strong",{parentName:"p"},"memory addresses"),"; collection of bytes of temporary storage space where bits of machine language instrucitons are stored."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"Second column")," : ",(0,a.kt)("strong",{parentName:"p"},"f3 0f 1e fa")," ... the hexadecimal bytes are the Operation Codes (Op codes); represents specific machine-level instructions that CPU can execute."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"Third column")," : ",(0,a.kt)("strong",{parentName:"p"},"push"),", ",(0,a.kt)("strong",{parentName:"p"},"mov")," .. these are assembly language; collection of mnemonics for the corresponding machine language instructions. For example: ",(0,a.kt)("strong",{parentName:"p"},"ret"),' instruction(short for "return") is easier to remember than ',(0,a.kt)("strong",{parentName:"p"},"c3")," or ",(0,a.kt)("strong",{parentName:"p"},"11000011"),"."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"Fourth column")," : ",(0,a.kt)("strong",{parentName:"p"},"%rsp, %rbp")," .. these are regsiters like stack pointer register(rsp), base pointer register(bsp). Also includes immediate value, memory addressess.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Processors have their own set of variables called ",(0,a.kt)("strong",{parentName:"li"},"registers"),". The instructions use these registers to read or write data.")),(0,a.kt)("h3",{id:"the-x86-processor"},"The x86 Processor"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"x86")," processor has several registers.\nWe can use ",(0,a.kt)("em",{parentName:"p"},"debugger")," tool called ",(0,a.kt)("em",{parentName:"p"},"GDB"),", included in GNU development tools, to step through compiled programs, examine program memory, and view processor registers."),(0,a.kt)("p",null,"Let's inspect through our compiled program using the GDB debugger."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ gdb -q ./first_binary_program\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".\n\nBreakpoint 1, 0x0000555555555151 in main ()\n(gdb) info registers\nrax            0x555555555149      93824992235849\nrbx            0x0                 0\nrcx            0x555555557dc0      93824992247232\nrdx            0x7fffffffde48      140737488346696\nrsi            0x7fffffffde38      140737488346680\nrdi            0x1                 1\nrbp            0x7fffffffdd20      0x7fffffffdd20\nrsp            0x7fffffffdd20      0x7fffffffdd20\nr8             0x7ffff7f95f10      140737353703184\nr9             0x7ffff7fc9040      140737353912384\nr10            0x7ffff7fc3908      140737353890056\nr11            0x7ffff7fde6c0      140737354000064\nr12            0x7fffffffde38      140737488346680\nr13            0x555555555149      93824992235849\nr14            0x555555557dc0      93824992247232\nr15            0x7ffff7ffd040      140737354125376\n--Type <RET> for more, q to quit, c to continue without paging--\nrip            0x555555555151      0x555555555151 <main+8>\neflags         0x246               [ PF ZF IF ]\ncs             0x33                51\nss             0x2b                43\nds             0x0                 0\nes             0x0                 0\nfs             0x0                 0\ngs             0x0                 0\nk0             0x40004000          1073758208\nk1             0x2200000           35651584\nk2             0x0                 0\nk3             0x0                 0\nk4             0x0                 0\nk5             0x0                 0\nk6             0x0                 0\nk7             0x0                 0\n(gdb) quit\nA debugging session is active.\n\n    Inferior 1 [process 598254] will be killed.\n\nQuit anyway? (y or n) y\n')),(0,a.kt)("admonition",{title:"breakdown of debugger exectuion",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"first we set a breakpoint on the main() function so exection will stop right before the code is executed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'GDB runs the program and stops at the breakpoint, and with "info registers", displays all the processoer registers and their current states.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The first four registers (rax,rbx,rcx,rdx) are general-purpose registers called ",(0,a.kt)("em",{parentName:"p"},"Accumulator"),", ",(0,a.kt)("em",{parentName:"p"},"Base"),", ",(0,a.kt)("em",{parentName:"p"},"Counter")," and ",(0,a.kt)("em",{parentName:"p"},"Data")," registers respectively. ",(0,a.kt)("strong",{parentName:"p"},"Mainly used as temporary variables for the CPU while executing instructions."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The second four registers(rsi,rdi,rbp,rsp) are also general purpose resiters, but also known as ",(0,a.kt)("strong",{parentName:"p"},"Pointers")," and ",(0,a.kt)("strong",{parentName:"p"},"Indexes"),". They stand for ",(0,a.kt)("em",{parentName:"p"},"Source Index"),", ",(0,a.kt)("em",{parentName:"p"},"Destination Index"),", ",(0,a.kt)("em",{parentName:"p"},"Base Pointer")," and ",(0,a.kt)("em",{parentName:"p"},"Stack Pointer"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Pointers")," beacause they store 32-bit addresses, which point to that location in memory. Important to program execution and memory management.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Indexes")," are technically pointers, commonly used to point to the source and destination when data  needs to be read from or written to. There are load and store instructions that use these registers.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("em",{parentName:"p"},"rip")," register is the ",(0,a.kt)("strong",{parentName:"p"},"Instruction Pointer")," register. It points to the current instruction the processor is reading. Currently, it points to the memory address at ",(0,a.kt)("em",{parentName:"p"},"0x555555555151"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The other ",(0,a.kt)("em",{parentName:"p"},"eflags")," register consists of several bigt flags that are used for comparisons and memory segmentations. These registers keep track of different segments, the acual memory has been split to.")))),(0,a.kt)("h3",{id:"assembly-language"},"Assembly Language"))}u.isMDXComponent=!0}}]);