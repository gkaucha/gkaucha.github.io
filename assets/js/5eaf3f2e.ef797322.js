"use strict";(self.webpackChunkgkaucha_github_io=self.webpackChunkgkaucha_github_io||[]).push([[8388],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>f});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),m=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=m(t.components);return n.createElement(p.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},g=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),d=m(a),g=r,f=d["".concat(p,".").concat(g)]||d[g]||c[g]||l;return a?n.createElement(f,i(i({ref:e},s),{},{components:a})):n.createElement(f,i({ref:e},s))}));function f(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[d]="string"==typeof t?t:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},8979:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:2},i="Fundamental Programming Concepts",o={unversionedId:"Programming/fundamental-programming-concepts",id:"Programming/fundamental-programming-concepts",title:"Fundamental Programming Concepts",description:"Variables",source:"@site/docs/Programming/fundamental-programming-concepts.mdx",sourceDirName:"Programming",slug:"/Programming/fundamental-programming-concepts",permalink:"/docs/Programming/fundamental-programming-concepts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programming/fundamental-programming-concepts.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"What is programming?",permalink:"/docs/Programming/basics-of-programming"},next:{title:"Processor and Assembly Language",permalink:"/docs/Programming/processor-and-assembly-language"}},p={},m=[{value:"Variables",id:"variables",level:3},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Functions",id:"functions",level:3}],s={toc:m},d="wrapper";function c(t){let{components:e,...a}=t;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fundamental-programming-concepts"},"Fundamental Programming Concepts"),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"A variable can be thought of as an object that holds data that can be changed.\nThere are also variables that don't change, called ",(0,r.kt)("strong",{parentName:"p"},"Constants"),"."),(0,r.kt)("p",null,"All variables are stored in memory somewhere, and their declarations allow the compiler\nto organize this memory more efficiently. Despite all of the variable type declarations, everything is all just memory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"int a = 13, b;\nfloat k;\nchar z = 'A';\nk = 3.14;\nz = 'w';\nb = a + 5;\n")),(0,r.kt)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Symbol"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Addition"),(0,r.kt)("td",{parentName:"tr",align:"left"},"+"),(0,r.kt)("td",{parentName:"tr",align:"left"},"b = a + 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Substraction"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"b = a - 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Multiplication"),(0,r.kt)("td",{parentName:"tr",align:"left"},"*"),(0,r.kt)("td",{parentName:"tr",align:"left"},"b = a* 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Division"),(0,r.kt)("td",{parentName:"tr",align:"left"},"/"),(0,r.kt)("td",{parentName:"tr",align:"left"},"b = a / 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Modulo reduction"),(0,r.kt)("td",{parentName:"tr",align:"left"},"%"),(0,r.kt)("td",{parentName:"tr",align:"left"},"b = a % 5")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Full Expression"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Shorthand"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Explanation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"c = c + 1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"c++ or ++c"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add 1 to the variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"c = c - 1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"c-- or --c"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Substract 1 from the variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"d = d + 21"),(0,r.kt)("td",{parentName:"tr",align:"left"},"d+=21"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add some value to the variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"d = d - 12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"d-=12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Substract some value from the variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"e = e * 33"),(0,r.kt)("td",{parentName:"tr",align:"left"},"e*=33"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Multiply some value by the variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"f = f /12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"f/=12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Divide some value from the variable")))),(0,r.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Condition"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Symbol"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Less than"),(0,r.kt)("td",{parentName:"tr",align:"left"},"<"),(0,r.kt)("td",{parentName:"tr",align:"left"},"(a < b)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Greater than"),(0,r.kt)("td",{parentName:"tr",align:"left"},">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"(a > b)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Less than or equal to"),(0,r.kt)("td",{parentName:"tr",align:"left"},"<="),(0,r.kt)("td",{parentName:"tr",align:"left"},"(a <= b)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Greater than or equal to"),(0,r.kt)("td",{parentName:"tr",align:"left"},">="),(0,r.kt)("td",{parentName:"tr",align:"left"},"(a >= b)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Equal to"),(0,r.kt)("td",{parentName:"tr",align:"left"},"=="),(0,r.kt)("td",{parentName:"tr",align:"left"},"(a == b)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Not equal to"),(0,r.kt)("td",{parentName:"tr",align:"left"},"!="),(0,r.kt)("td",{parentName:"tr",align:"left"},"(a != b)")))),(0,r.kt)("p",null,"SO, ",(0,r.kt)("strong",{parentName:"p"},"!(d < z)")," is equivalent to ",(0,r.kt)("strong",{parentName:"p"},"(d >= z)")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Logic"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Symbol"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"OR"),(0,r.kt)("td",{parentName:"tr",align:"left"},"|","|"),(0,r.kt)("td",{parentName:"tr",align:"left"},"((a < b) ","|","|"," (a < c))")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"AND"),(0,r.kt)("td",{parentName:"tr",align:"left"},"&&"),(0,r.kt)("td",{parentName:"tr",align:"left"},"((a < b) && !(a < c))")))),(0,r.kt)("p",null,"Statement consisting of conditions joined with OR logic will fire if any one condition is TRUE.\nStatement consisting of Conditions joined with AND logic will fire only and only if all conditions are TRUE."),(0,r.kt)("p",null,'In C, any non-zero value is considered true. The value of 0 is considered false. In the following mouse program :) example, "hungry" equals 1.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"while (hungry)\n{\n  Find some food;\n  Eat the food;\n}\n")),(0,r.kt)("p",null,"More smarter mouse program would be the following."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"while((hungry) && !(cat_present))\n{\n  Find some food;\n  if(!(food_is_on_a_mousetrap))\n    Eat the food;\n}\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Sometimes a particular set of instructions need to be run several times. These set of instructions can be groupd into a small sub-program called ",(0,r.kt)("strong",{parentName:"p"},"function"),". Also called sub-routines or procedures."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Variables can be passed as arguments to a function in order to modify the way the function operates."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Function Turn(variable_direction)\n{\n  Activate the variable_direction blinker;\n  Slow down;\n\n  Check for oncoming traffic;\n  while(there is oncoming traffic)\n  {\n    Stop;\n    Watch for oncoming traffic;\n  }\n\n  Turn the steering wheel to the variable_direction;\n  while(turn is not complete)\n  {\n    if(speed < 5 mph)\n    Accelerate;\n  }\n\n  Turn the steering wheel back to the original position;\n  Turn off the variable_direction blinker;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Functions can return a value to a caller."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"int factorial(int x)\n{\n  int i;\n  for(i=1; i < x; i++)\n    x *= i;\n  return x;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Function Prototypes")," tell compiler to expect function with this name,\nthis return data type, and these data types as its functional arguments."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"int factorial(int)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If a function doesn't have any value to return, it should be declared as ",(0,r.kt)("strong",{parentName:"p"},"void")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"void turn(variable_direction, target_street_name)\n{\n  Look for a street sign;\n  current_intersection_name = read street sign name;\n\n  while(current_intersection_name != target_street_name)\n  {\n    Look for another street sign;\n    current_intersection_name = read street sign name;\n  }\n\n  Activate the variable_direction blinker;\n  Slow down;\n  Check for oncoming traffic;\n  while(there is oncoming traffic)\n    {\n      Stop;\n      Watch for oncoming traffic;\n    }\n  \n  Turn the steering wheel to the variable_direction;\n  while(turn is not complete)\n  {\n    if(speed < 5 mph)\n    Accelerate;\n  }\n\n  Turn the steering wheel right back to the original position;\n  Turn off the variable_direction blinker;\n  }\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"libraries"),"; the collection of existing Functions are used heavily on C."))))}c.isMDXComponent=!0}}]);